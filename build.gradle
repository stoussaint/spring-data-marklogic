plugins {
    id "org.asciidoctor.convert" version "1.5.12"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.springframework.boot" version "2.5.1" apply false
}

apply plugin: 'java-library'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.8

group 'com.4dconcept.springframework.data'

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:unchecked"
}

ext {
    pomFile = file("${project.buildDir}/generated-pom.xml")
    isReleaseVersion = !(project.version =~ /-SNAPSHOT$/)
}

repositories {
    jcenter()
    maven { url "https://repo.springsource.org/release" }
    maven { url "http://developer.marklogic.com/maven2" }
}

dependencyManagement {
    imports {
        mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    }
}

dependencies {
    api 'org.springframework.data:spring-data-commons'

    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.marklogic:marklogic-xcc:9.0.13'
    implementation 'javax.transaction:javax.transaction-api'
    implementation 'org.aspectj:aspectjweaver'
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework:spring-oxm'
    implementation 'org.springframework:spring-tx'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    testImplementation 'ch.qos.logback:logback-classic'
    testImplementation 'junit:junit'
    testImplementation 'org.hamcrest:hamcrest-core'
    testImplementation 'org.hamcrest:hamcrest-library'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.springframework:spring-test'
}

def pomConfig = {
    resolveStrategy = Closure.DELEGATE_FIRST
    name 'Spring Data Marklogic'
    url 'https://github.com/stoussaint/spring-data-marklogic'
    description 'Marklogic support for Spring Data'
    organization {
        name '4DConcept'
        url 'http://www.4dconcept.com/en'
    }
    issueManagement {
        system 'GitHub Issues'
        url 'https://github.com/stoussaint/spring-data-marklogic/issues'
    }
    scm {
        url 'https://github.com/stoussaint/spring-data-marklogic'
        connection 'scm:git:git://github.com/stoussaint/spring-data-marklogic.git'
        developerConnection 'scm:git:git@github.com:stoussaint/spring-data-marklogic.git'
    }
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    repositories {
        repository {
            id 'maven2-repository.com.marklogic.developer'
            name 'Marklogic Maven Repository'
            url 'http://developer.marklogic.com/maven2'
        }
    }
    developers {
        developer {
            id 'stoussaint'
            name 'StÃ©phane Toussaint'
            email 'stephane.toussaint@4dconcept.fr'
        }
        developer {
            id 'sktifa'
            name 'Sahbi Ktifa'
            email 'sahbi.ktifa@4dconcept.fr'
        }
    }
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

signing {
    required { signatory != null && project.ext.isReleaseVersion }
    sign configurations.archives
}


publishing {
    repositories {
        maven {
            if(project.ext.isReleaseVersion) {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            } else {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            }

            credentials {
                username = "$ossrhUsername"
                password = "$ossrhPassword"
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact(sourcesJar) {
                classifier = "sources"
            }
            artifact(javadocJar) {
                classifier = "javadoc"
            }

            pom.packaging = "jar"

            pom.withXml {
                asNode().get("version") + pomConfig
            }

            if (signing.required) {
                // Sign the pom.xml.
                pom.withXml {
                    writeTo(project.ext.pomFile)
                    def pomAscFile = signing.sign(project.ext.pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    //project.ext.pomFile.delete()
                }

                // Sign the artifacts.
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
}

test {
    exclude '**/*IntegrationTests.class'
}

task integrationTest( type: Test ) {
    include '**/*IntegrationTests.class'
}

asciidoctor {
    attributes 'build-gradle' : file('build.gradle'),
            'source-highlighter': 'coderay',
            'imagesdir': 'images',
            'doctype': 'book',
            'toc': '',
            'toc-placement!': '',
            'toclevels': '2',
            'icons': 'font',
            'setanchors': '',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': '',
            'spring-data-commons-docs': file('../spring-data-commons/src/main/asciidoc'),
            'spring-data-marklogic-source':file('src/main/java')
}
